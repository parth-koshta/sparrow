// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	token "github.com/parth-koshta/sparrow/token"
)

// Maker is an autogenerated mock type for the Maker type
type Maker struct {
	mock.Mock
}

// CreateToken provides a mock function with given fields: email, duration
func (_m *Maker) CreateToken(email string, duration time.Duration) (string, error) {
	ret := _m.Called(email, duration)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) (string, error)); ok {
		return rf(email, duration)
	}
	if rf, ok := ret.Get(0).(func(string, time.Duration) string); ok {
		r0 = rf(email, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, time.Duration) error); ok {
		r1 = rf(email, duration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: _a0
func (_m *Maker) VerifyToken(_a0 string) (*token.Payload, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *token.Payload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*token.Payload, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *token.Payload); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*token.Payload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMaker creates a new instance of Maker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *Maker {
	mock := &Maker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
