// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: prompts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreatePrompt = `-- name: CreatePrompt :one
INSERT INTO prompts (
  user_id, prompt_text
) VALUES (
  $1, $2
)
RETURNING id, user_id, prompt_text, created_at, updated_at
`

type CreatePromptParams struct {
	UserID     pgtype.UUID
	PromptText string
}

func (q *Queries) CreatePrompt(ctx context.Context, arg CreatePromptParams) (Prompt, error) {
	row := q.db.QueryRow(ctx, CreatePrompt, arg.UserID, arg.PromptText)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeletePrompt = `-- name: DeletePrompt :one
DELETE FROM prompts
WHERE id = $1
RETURNING id, user_id, prompt_text, created_at, updated_at
`

func (q *Queries) DeletePrompt(ctx context.Context, id pgtype.UUID) (Prompt, error) {
	row := q.db.QueryRow(ctx, DeletePrompt, id)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPromptByID = `-- name: GetPromptByID :one
SELECT id, user_id, prompt_text, created_at, updated_at
FROM prompts
WHERE id = $1
`

func (q *Queries) GetPromptByID(ctx context.Context, id pgtype.UUID) (Prompt, error) {
	row := q.db.QueryRow(ctx, getPromptByID, id)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListPromptsByUserID = `-- name: ListPromptsByUserID :many
SELECT id, user_id, prompt_text, created_at, updated_at
FROM prompts
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPromptsByUserIDParams struct {
	UserID pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListPromptsByUserID(ctx context.Context, arg ListPromptsByUserIDParams) ([]Prompt, error) {
	rows, err := q.db.Query(ctx, ListPromptsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Prompt
	for rows.Next() {
		var i Prompt
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PromptText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePrompt = `-- name: UpdatePrompt :one
UPDATE prompts
SET prompt_text = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, prompt_text, created_at, updated_at
`

type UpdatePromptParams struct {
	ID         pgtype.UUID
	PromptText string
}

func (q *Queries) UpdatePrompt(ctx context.Context, arg UpdatePromptParams) (Prompt, error) {
	row := q.db.QueryRow(ctx, UpdatePrompt, arg.ID, arg.PromptText)
	var i Prompt
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PromptText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
