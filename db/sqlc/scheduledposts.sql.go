// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: scheduledposts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createScheduledPost = `-- name: CreateScheduledPost :one
INSERT INTO scheduledposts (
  user_id, draft_id, scheduled_time, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, draft_id, scheduled_time, status, created_at, updated_at
`

type CreateScheduledPostParams struct {
	UserID        pgtype.UUID
	DraftID       pgtype.UUID
	ScheduledTime pgtype.Timestamp
	Status        string
}

func (q *Queries) CreateScheduledPost(ctx context.Context, arg CreateScheduledPostParams) (Scheduledpost, error) {
	row := q.db.QueryRow(ctx, createScheduledPost,
		arg.UserID,
		arg.DraftID,
		arg.ScheduledTime,
		arg.Status,
	)
	var i Scheduledpost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DraftID,
		&i.ScheduledTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteScheduledPost = `-- name: DeleteScheduledPost :one
DELETE FROM scheduledposts
WHERE id = $1
RETURNING id, user_id, draft_id, scheduled_time, status, created_at, updated_at
`

func (q *Queries) DeleteScheduledPost(ctx context.Context, id pgtype.UUID) (Scheduledpost, error) {
	row := q.db.QueryRow(ctx, deleteScheduledPost, id)
	var i Scheduledpost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DraftID,
		&i.ScheduledTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getScheduledPostByID = `-- name: GetScheduledPostByID :one
SELECT id, user_id, draft_id, scheduled_time, status, created_at, updated_at
FROM scheduledposts
WHERE id = $1
`

func (q *Queries) GetScheduledPostByID(ctx context.Context, id pgtype.UUID) (Scheduledpost, error) {
	row := q.db.QueryRow(ctx, getScheduledPostByID, id)
	var i Scheduledpost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DraftID,
		&i.ScheduledTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listScheduledPostsByUserID = `-- name: ListScheduledPostsByUserID :many
SELECT id, user_id, draft_id, scheduled_time, status, created_at, updated_at
FROM scheduledposts
WHERE user_id = $1
ORDER BY scheduled_time DESC
LIMIT $2 OFFSET $3
`

type ListScheduledPostsByUserIDParams struct {
	UserID pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListScheduledPostsByUserID(ctx context.Context, arg ListScheduledPostsByUserIDParams) ([]Scheduledpost, error) {
	rows, err := q.db.Query(ctx, listScheduledPostsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scheduledpost
	for rows.Next() {
		var i Scheduledpost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DraftID,
			&i.ScheduledTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScheduledPost = `-- name: UpdateScheduledPost :one
UPDATE scheduledposts
SET scheduled_time = $2,
    status = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, draft_id, scheduled_time, status, created_at, updated_at
`

type UpdateScheduledPostParams struct {
	ID            pgtype.UUID
	ScheduledTime pgtype.Timestamp
	Status        string
}

func (q *Queries) UpdateScheduledPost(ctx context.Context, arg UpdateScheduledPostParams) (Scheduledpost, error) {
	row := q.db.QueryRow(ctx, updateScheduledPost, arg.ID, arg.ScheduledTime, arg.Status)
	var i Scheduledpost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DraftID,
		&i.ScheduledTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
