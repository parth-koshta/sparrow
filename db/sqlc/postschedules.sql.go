// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: postschedules.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPostSchedule = `-- name: CreatePostSchedule :one
INSERT INTO postschedules (
  user_id, post_id, scheduled_time, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, post_id, scheduled_time, executed_time, status, created_at, updated_at
`

type CreatePostScheduleParams struct {
	UserID        pgtype.UUID
	PostID        pgtype.UUID
	ScheduledTime pgtype.Timestamp
	Status        string
}

func (q *Queries) CreatePostSchedule(ctx context.Context, arg CreatePostScheduleParams) (Postschedule, error) {
	row := q.db.QueryRow(ctx, createPostSchedule,
		arg.UserID,
		arg.PostID,
		arg.ScheduledTime,
		arg.Status,
	)
	var i Postschedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ScheduledTime,
		&i.ExecutedTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePostSchedule = `-- name: DeletePostSchedule :one
DELETE FROM postschedules
WHERE id = $1
RETURNING id, user_id, post_id, scheduled_time, executed_time, status, created_at, updated_at
`

func (q *Queries) DeletePostSchedule(ctx context.Context, id pgtype.UUID) (Postschedule, error) {
	row := q.db.QueryRow(ctx, deletePostSchedule, id)
	var i Postschedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ScheduledTime,
		&i.ExecutedTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostScheduleByID = `-- name: GetPostScheduleByID :one
SELECT id, user_id, post_id, scheduled_time, status, created_at, updated_at
FROM postschedules
WHERE id = $1
`

type GetPostScheduleByIDRow struct {
	ID            pgtype.UUID
	UserID        pgtype.UUID
	PostID        pgtype.UUID
	ScheduledTime pgtype.Timestamp
	Status        string
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) GetPostScheduleByID(ctx context.Context, id pgtype.UUID) (GetPostScheduleByIDRow, error) {
	row := q.db.QueryRow(ctx, getPostScheduleByID, id)
	var i GetPostScheduleByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ScheduledTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPostSchedulesByUserID = `-- name: ListPostSchedulesByUserID :many
SELECT id, user_id, post_id, scheduled_time, status, created_at, updated_at
FROM postschedules
WHERE user_id = $1
ORDER BY scheduled_time DESC
LIMIT $2 OFFSET $3
`

type ListPostSchedulesByUserIDParams struct {
	UserID pgtype.UUID
	Limit  int32
	Offset int32
}

type ListPostSchedulesByUserIDRow struct {
	ID            pgtype.UUID
	UserID        pgtype.UUID
	PostID        pgtype.UUID
	ScheduledTime pgtype.Timestamp
	Status        string
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) ListPostSchedulesByUserID(ctx context.Context, arg ListPostSchedulesByUserIDParams) ([]ListPostSchedulesByUserIDRow, error) {
	rows, err := q.db.Query(ctx, listPostSchedulesByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPostSchedulesByUserIDRow
	for rows.Next() {
		var i ListPostSchedulesByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.ScheduledTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostSchedule = `-- name: UpdatePostSchedule :one
UPDATE postschedules
SET scheduled_time = $2,
    status = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, post_id, scheduled_time, executed_time, status, created_at, updated_at
`

type UpdatePostScheduleParams struct {
	ID            pgtype.UUID
	ScheduledTime pgtype.Timestamp
	Status        string
}

func (q *Queries) UpdatePostSchedule(ctx context.Context, arg UpdatePostScheduleParams) (Postschedule, error) {
	row := q.db.QueryRow(ctx, updatePostSchedule, arg.ID, arg.ScheduledTime, arg.Status)
	var i Postschedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.ScheduledTime,
		&i.ExecutedTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
