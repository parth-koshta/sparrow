// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: drafts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDraft = `-- name: CreateDraft :one
INSERT INTO drafts (
  user_id, suggestion_id, draft_text
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, suggestion_id, draft_text, created_at, updated_at
`

type CreateDraftParams struct {
	UserID       pgtype.UUID
	SuggestionID pgtype.UUID
	DraftText    string
}

func (q *Queries) CreateDraft(ctx context.Context, arg CreateDraftParams) (Draft, error) {
	row := q.db.QueryRow(ctx, createDraft, arg.UserID, arg.SuggestionID, arg.DraftText)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SuggestionID,
		&i.DraftText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteDraft = `-- name: DeleteDraft :one
DELETE FROM drafts
WHERE id = $1
RETURNING id, user_id, suggestion_id, draft_text, created_at, updated_at
`

func (q *Queries) DeleteDraft(ctx context.Context, id pgtype.UUID) (Draft, error) {
	row := q.db.QueryRow(ctx, DeleteDraft, id)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SuggestionID,
		&i.DraftText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDraftByID = `-- name: GetDraftByID :one
SELECT id, user_id, suggestion_id, draft_text, created_at, updated_at
FROM drafts
WHERE id = $1
`

func (q *Queries) GetDraftByID(ctx context.Context, id pgtype.UUID) (Draft, error) {
	row := q.db.QueryRow(ctx, getDraftByID, id)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SuggestionID,
		&i.DraftText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListDraftsByUserID = `-- name: ListDraftsByUserID :many
SELECT id, user_id, suggestion_id, draft_text, created_at, updated_at
FROM drafts
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListDraftsByUserIDParams struct {
	UserID pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListDraftsByUserID(ctx context.Context, arg ListDraftsByUserIDParams) ([]Draft, error) {
	rows, err := q.db.Query(ctx, ListDraftsByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Draft
	for rows.Next() {
		var i Draft
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SuggestionID,
			&i.DraftText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateDraft = `-- name: UpdateDraft :one
UPDATE drafts
SET draft_text = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, suggestion_id, draft_text, created_at, updated_at
`

type UpdateDraftParams struct {
	ID        pgtype.UUID
	DraftText string
}

func (q *Queries) UpdateDraft(ctx context.Context, arg UpdateDraftParams) (Draft, error) {
	row := q.db.QueryRow(ctx, UpdateDraft, arg.ID, arg.DraftText)
	var i Draft
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SuggestionID,
		&i.DraftText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
