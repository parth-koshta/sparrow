// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: postsuggesstions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const bulkCreatePostSuggestions = `-- name: BulkCreatePostSuggestions :many
INSERT INTO postsuggestions (prompt_id, text)
SELECT $1, unnest($2::text[])
ON CONFLICT (prompt_id, text) DO NOTHING
RETURNING id, prompt_id, text, created_at
`

type BulkCreatePostSuggestionsParams struct {
	PromptID    pgtype.UUID `json:"prompt_id"`
	Suggestions []string    `json:"suggestions"`
}

type BulkCreatePostSuggestionsRow struct {
	ID        pgtype.UUID      `json:"id"`
	PromptID  pgtype.UUID      `json:"prompt_id"`
	Text      string           `json:"text"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) BulkCreatePostSuggestions(ctx context.Context, arg BulkCreatePostSuggestionsParams) ([]BulkCreatePostSuggestionsRow, error) {
	rows, err := q.db.Query(ctx, bulkCreatePostSuggestions, arg.PromptID, arg.Suggestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BulkCreatePostSuggestionsRow
	for rows.Next() {
		var i BulkCreatePostSuggestionsRow
		if err := rows.Scan(
			&i.ID,
			&i.PromptID,
			&i.Text,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createPostSuggestion = `-- name: CreatePostSuggestion :one
INSERT INTO postsuggestions (
  prompt_id, text
) VALUES (
  $1, $2
)
RETURNING id, prompt_id, text, created_at, updated_at
`

type CreatePostSuggestionParams struct {
	PromptID pgtype.UUID `json:"prompt_id"`
	Text     string      `json:"text"`
}

func (q *Queries) CreatePostSuggestion(ctx context.Context, arg CreatePostSuggestionParams) (Postsuggestion, error) {
	row := q.db.QueryRow(ctx, createPostSuggestion, arg.PromptID, arg.Text)
	var i Postsuggestion
	err := row.Scan(
		&i.ID,
		&i.PromptID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePostSuggestion = `-- name: DeletePostSuggestion :one
DELETE FROM postsuggestions
WHERE id = $1
RETURNING id, prompt_id, text, created_at, updated_at
`

func (q *Queries) DeletePostSuggestion(ctx context.Context, id pgtype.UUID) (Postsuggestion, error) {
	row := q.db.QueryRow(ctx, deletePostSuggestion, id)
	var i Postsuggestion
	err := row.Scan(
		&i.ID,
		&i.PromptID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostSuggestionByID = `-- name: GetPostSuggestionByID :one
SELECT id, prompt_id, text, created_at, updated_at
FROM postsuggestions
WHERE id = $1
`

func (q *Queries) GetPostSuggestionByID(ctx context.Context, id pgtype.UUID) (Postsuggestion, error) {
	row := q.db.QueryRow(ctx, getPostSuggestionByID, id)
	var i Postsuggestion
	err := row.Scan(
		&i.ID,
		&i.PromptID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPostSuggestionsByPromptID = `-- name: ListPostSuggestionsByPromptID :many
SELECT id, prompt_id, text, created_at, updated_at
FROM postsuggestions
WHERE prompt_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPostSuggestionsByPromptIDParams struct {
	PromptID pgtype.UUID `json:"prompt_id"`
	Limit    int32       `json:"limit"`
	Offset   int32       `json:"offset"`
}

func (q *Queries) ListPostSuggestionsByPromptID(ctx context.Context, arg ListPostSuggestionsByPromptIDParams) ([]Postsuggestion, error) {
	rows, err := q.db.Query(ctx, listPostSuggestionsByPromptID, arg.PromptID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Postsuggestion
	for rows.Next() {
		var i Postsuggestion
		if err := rows.Scan(
			&i.ID,
			&i.PromptID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostSuggestion = `-- name: UpdatePostSuggestion :one
UPDATE postsuggestions
SET text = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, prompt_id, text, created_at, updated_at
`

type UpdatePostSuggestionParams struct {
	ID   pgtype.UUID `json:"id"`
	Text string      `json:"text"`
}

func (q *Queries) UpdatePostSuggestion(ctx context.Context, arg UpdatePostSuggestionParams) (Postsuggestion, error) {
	row := q.db.QueryRow(ctx, updatePostSuggestion, arg.ID, arg.Text)
	var i Postsuggestion
	err := row.Scan(
		&i.ID,
		&i.PromptID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
